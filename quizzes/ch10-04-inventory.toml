[[questions]]
id = "9ff33b87-38e2-471b-8ca4-9c31a6431376"
type = "MultipleChoice"
prompt.prompt = """
**Program 1:**

```ide
/// Returns the n-th largest element in a slice
fn find_nth<T: Ord + Clone>(elems: &[T], n: usize) -> T {
    elems.sort();
    let t = &elems[n];
    return t.clone();
}
```

If you tried to compile this program, which of the following best describes the compiler error you would get?
"""
answer.answer = "cannot borrow `elems` as mutable for `sort`"
prompt.distractors = [
  "cannot move out of shared reference for `clone`",
  "cannot move out of shared reference in expression `&elems[n]`",
  "the lifetime of `T` must outlive `&[T]`",
]
context = """
The method `slice::sort` expects a mutable reference to a slice, but
instead gets an immutable reference.
"""


[[questions]]
id = "3ee8d846-d282-4de1-8e83-5ca0bc44fc13"
type = "MultipleChoice"
prompt.prompt = """
**Program 1:**

```ide
/// Returns the n-th largest element in a slice
fn find_nth<T: Ord + Clone>(elems: &[T], n: usize) -> T {
    elems.sort();
    let t = &elems[n];
    return t.clone();
}
```

Normally if you try to compile this function, the compiler returns the following error:

```text
error[E0596]: cannot borrow `*elems` as mutable, as it is behind a `&` reference
 --> test.rs:3:5
  |
3 |     elems.sort();
  |     ^^^^^^^^^^^^ `elems` is a `&` reference, so the data it refers to cannot be borrowed as mutable
```

Assume that the compiler did NOT reject this function. Which (if any) of the following programs would
(1) pass the compiler, and (2) possibly cause undefined behavior if executed?
Check each program that satisfies both criteria, OR check "None of these programs" if none are satisfying.
"""
answer.answer = ["None of these programs"]
prompt.distractors = [
"""
```
let v = vec![5, 4, 3, 2, 1];
find_nth(&v, 10);
```
""",
"""
```
let v = vec![5, 4, 3, 2, 1];
find_nth(&v, 0);
println!("{}", v[0]);
```
""",
"""
```
let v = vec![5, 4, 3, 2, 1];
let n = &v[0];
find_nth(&v, 0);
println!("{}", n);
```
""",
]
context = """
This program is technically memory-safe because `slice::sort` is only capable of moving
elements around, not freeing them. For instance, `&v[0]` is guaranteed to point to 
*some* number after calling `find_nth`, even if it is not the *original* number.

Note that `find_nth(&v, 10)` does not cause undefined behavior because Rust performs checks
on array accesses, so evaluating `&v[10]` will panic.
"""


[[questions]]
id = "d070eb9e-4527-453a-8c9b-698739a3dd6a"
type = "MultipleChoice"
prompt.prompt = """
**Program 1:**

```ide
/// Returns the n-th largest element in a slice
fn find_nth<T: Ord + Clone>(elems: &[T], n: usize) -> T {
    elems.sort();
    let t = &elems[n];
    return t.clone();
}
```

Of the following fixes (highlighted in yellow), which fix best satisfies these three criteria:
1. The fixed function passes the Rust compiler,
2. The fixed function preserves the intention of the original code, and
3. The fixed function does not introduce unnecessary inefficiencies
"""
answer.answer = """
```ide
fn find_nth<T: Ord + Clone>(elems: &[T], n: usize) -> T {
    `[let mut elem_refs: Vec<&T> = elems.iter().collect();]`
    `[elem_refs.sort();]`
    let t = `[elem_refs[n]]`;
    return t.clone();
}
```
"""
prompt.distractors = [
"""
```ide
fn find_nth<T: Ord + Clone>(`[elems: &mut [T]]`, n: usize) -> T {
    elems.sort();
    let t = &elems[n];
    return t.clone();
}
```
""",
"""
```ide
fn find_nth<T: Ord + Clone>(elems: &[T], n: usize) -> T {
    `[let mut elems = elems.to_vec();]`
    elems.sort();
    let t = &elems[n];
    return t.clone();
}
```
""",
"""
```ide
fn find_nth<`[T: Ord]`>(`[mut elems: Vec<T>]`, n: usize) -> T {
    elems.sort();
    let t = `[elems.remove(n)]`;
    return `[t]`;
}
```
""",
]
context = """
A function like `find_nth` is clearly intended to be a read-only function, i.e. to
extract some property of the input sequence. Any solution which mutates or drops the input therefore does not preserve the original function's intention, even if
it is more efficient than creating an auxiliary vector. 

Creating a `Vec<&T>` is preferable to creating a `Vec<T>`, since if `T` is large, then
`elems.to_vec()` could be expensive. However, if we knew that `T: Copy`, then `to_vec`
would be preferable to reduce the number of pointer dereferences within `elems.sort()`.
"""

[[questions]]
id = "95979d75-5823-4059-a1cf-7e0eba69b41a"
type = "MultipleChoice"
prompt.prompt = """
**Program 2:**

```ide
struct TestResult {
    /// Student's scores on a test
    scores: Vec<usize>,

    /// A possible value to curve all scores
    curve: Option<usize>
}
impl TestResult {  
    pub fn get_curve(&self) -> &Option<usize> {
        &self.curve
    }

    /// If there is a curve, then increments all 
    /// scores by the curve
    pub fn apply_curve(&mut self) {
        if let Some(curve) = self.get_curve() {
            for score in self.scores.iter_mut() {
                *score += *curve;
            }
        }
    }
}
```

If you tried to compile this program, which of the following best describes the compiler error you would get?
"""
answer.answer = "in `apply_curve`, cannot borrow `self.scores` as mutable for `iter_mut`"
prompt.distractors = [
  "in `get_curve`, cannot return a reference to a local variable `self.curve`",
  "in `apply_curve`, cannot borrow `self` as immutable for `get_curve`",
  "in `apply_curve`, `*score` cannot be mutated"
]
context = """
Due to lifetime elision, the function `get_curve` has the type signature `get_curve<'a>(&'a self) -> &'a Option<usize>`. 
This means that a call to `self.get_curve()` extends the entire borrow on `self`, not just on `self.curve`.
Therefore `self` is immutably borrowed inside the scope of `let Some(curve) = ...`, and `self.scores.iter_mut()`
cannot be called.
"""


[[questions]]
id = "dcb42a15-d9b7-437d-95ec-f000b64ce277"
type = "MultipleChoice"
prompt.prompt = """
**Program 2:**

```ide
struct TestResult {
    /// Student's scores on a test
    scores: Vec<usize>,

    /// A possible value to curve all scores
    curve: Option<usize>
}
impl TestResult {  
    pub fn get_curve(&self) -> &Option<usize> {
        &self.curve
    }

    /// If there is a curve, then increments all 
    /// scores by the curve
    pub fn apply_curve(&mut self) {
        if let Some(curve) = self.get_curve() {
            for score in self.scores.iter_mut() {
                *score += *curve;
            }
        }
    }
}
```

Normally if you try to compile this function, the compiler returns the following error:

```text
error[E0502]: cannot borrow `self.scores` as mutable because it is also borrowed as immutable
  --> test.rs:17:26
   |
16 |         if let Some(curve) = self.get_curve() {
   |                              ---------------- immutable borrow occurs here
17 |             for score in self.scores.iter_mut() {
   |                          ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here
18 |                 *score += *curve;
   |                           ------ immutable borrow later used here
```

Assume that the compiler did NOT reject this function. Which (if any) of the following programs would
(1) pass the compiler, and (2) possibly cause undefined behavior if executed?
Check each program that satisfies both criteria, OR check "None of these programs" if none are satisfying.
"""
answer.answer = ["None of these programs"]
prompt.distractors = [
"""
```
let mut result = TestResult { 
    scores: vec![20, 50, 30], 
    curve: Some(10) 
};
result.apply_curve();
```
""",
"""
```
let mut result = TestResult { 
    scores: vec![20, 50, 30], 
    curve: Some(10) 
};
let x = &result.scores[0];
result.apply_curve();
println!("{}", x);
```
""",
"""
```
let mut result = TestResult { 
    scores: vec![20, 50, 30], 
    curve: Some(10) 
};
result.apply_curve();
println!("{:?}", result.scores);
```
""",
]
context = """
This program is actually safe as written. It is a limitation of the borrow checker to not understand that `get_curve`
only borrows `curve`, and doesn't affect `scores`. However, in theory if `get_curve` were changed to return a reference
to something with `self.scores`, then memory safety could potentially be violated.
"""

[[questions]]
id = "aa93c497-9864-4799-b69b-7de42c158f2a"
type = "MultipleChoice"
prompt.prompt = """
**Program 2:**

```ide
struct TestResult {
    /// Student's scores on a test
    scores: Vec<usize>,

    /// A possible value to curve all scores
    curve: Option<usize>
}
impl TestResult {  
    pub fn get_curve(&self) -> &Option<usize> {
        &self.curve
    }

    /// If there is a curve, then increments all 
    /// scores by the curve
    pub fn apply_curve(&mut self) {
        if let Some(curve) = self.get_curve() {
            for score in self.scores.iter_mut() {
                *score += *curve;
            }
        }
    }
}
```

Of the following fixes (highlighted in yellow), which fix best satisfies these three criteria:
1. The fixed function passes the Rust compiler,
2. The fixed function preserves the intention of the original code, and
3. The fixed function does not introduce unnecessary inefficiencies
"""
answer.answer = """
```ide
pub fn apply_curve(&mut self) {
    if let Some(curve) = `[self.curve]` {
        for score in self.scores.iter_mut() {
            *score += curve;
        }
    }
}
```
"""
prompt.distractors = [
"""
```ide
pub fn apply_curve(&mut self) {
    if let Some(curve) = self.get_curve()`[.as_ref()]` {
        for score in self.scores.iter_mut() {
            *score += *curve;
        }
    }
}
```
""",
"""
```ide
pub fn apply_curve(&mut self) {
    if let Some(curve) = self.get_curve() {
        for score in self.scores`[.clone()]`.iter_mut() {
            *score += *curve;
        }
    }
}
```
""",
"""
```ide
pub fn apply_curve(&mut self) {
    if let Some(curve) = self.get_curve() {
        for score in self.scores`[.iter()]` {
            *score += *curve;
        }
    }
}
```
""",
]
context = """
By inlining the definition of `get_curve` into `apply_curve`, the borrow checker understands that `self.curve` is not `self.scores`,
so it allows the function to compile. This is a common workaround for this type of borrow checker limitation.

Another option is to leverage the fact that `self.curve` is cheap to copy and use [`Option::copied`](https://doc.rust-lang.org/std/option/enum.Option.html#method.copied), 
which would release the borrow on `self` as soon as `.copied()` is called.
"""