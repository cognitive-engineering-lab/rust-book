[[questions]]
id = "5b6e4016-c089-4cb3-96a7-ca9f88694488"
type = "Tracing"
prompt.program = """
enum Location {
  Point(i32),
  Range(i32, i32)
}

fn main() {
  let l: Location = Location::Range(0, 5);
  let n = match l {
    Location::Point(_) => -1,
    Location::Range(_, n) => n,
    Location::Range(0, _) => 0,
    _ => -2
  };
  println!("{n}");
}
"""
answer.doesCompile = true
answer.stdout = "5"
context = """ 
Each match is tried from top to bottom. Both the second and third pattern are applicable, so the second one is used.
"""


[[questions]]
id = "f7c361e0-733a-4d48-9809-736e3c1e2b67"
type = "MultipleChoice"
prompt.prompt = """
Consider this method implemented for the `Option` type:

```
impl<T> Option<T> {
  fn unwrap_or(self, other: T) -> T {
    match self {
      Some(t) => t,
      None => other
    }
  }
}
```

Which sentence best describes the behavior of this function?
"""
answer.answer = "Returns the object inside `self` if it exists, and `other` otherwise"
prompt.distractors = [
  "Returns a new option containing the object inside `self` if it exists, and `other` otherwise",
  "Inserts `other` into `self` if `self` does not already contain a value",
  "Returns a reference to the object inside `self` if it exists, and `other` otherwise"
]
context = """
This function "unwraps" the option by consuming ownership of it and retrieving the value inside, but if no value exists then it falls back by returning `other`.
This is a real function in the standard library!
"""


[[questions]]
id = "1e4f082c-ffa4-4d33-8726-2dbcd72e1aa2"
type = "Tracing"
prompt.program = """
#[derive(Debug)]
enum Either {
  Left(usize),
  Right(String)
}

fn main() {
  let x = Either::Right(String::from("Hello world"));
  let value = match x {
    Either::Left(n) => n,
    Either::Right(s) => s.len()
  };
  println!("{x:?} {value}");
}
"""
answer.doesCompile = false
answer.lineNumber = 13
context = """
The match arm `Either::Right(s)` moves the field `s`, so `x` cannot be used in the `println`.
"""


[[questions]]
id = "6e012d34-5c59-443e-85d9-385f0d7dee13"
type = "MultipleChoice"
prompt.prompt = """
Consider these two implementations of a function to decrement an unsigned number twice.

```
fn decr_twice_v1(n: u32) -> Option<u32> {
  match n {
    0 => None,
    1 => None,
    _ => Some(n - 2)
  }
}

fn decr_twice_v2(n: u32) -> Option<u32> {
  if n == 0 {
    None
  } else if n == 1 {
    None
  } else {
    Some(n - 2)
  }
}
```

The functions have the same behavior for:
"""
answer.answer = "All inputs"
prompt.distractors = [ "No inputs", "Some, but not all inputs" ]
context = """
The `match` and `if` perform the same function here. A match is like a specialized `if` that checks for equality of the matched object.
"""