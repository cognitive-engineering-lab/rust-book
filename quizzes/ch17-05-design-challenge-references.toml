[multipart]
q = """
**Context:** You are designing a simple asset manager for a game engine.

**Functionality:** An API client will provide paths of assets to load, and gets back access to the loaded assets.

**Assumptions:** You may assume that loads happen synchronously and instantaneously.

**Designs:** Below are several proposed designs to implement the functionality.

```
pub struct AssetManager {
    // ...
}

// Option 1: return a reference
impl AssetManager {
    pub fn load(&mut self, path: PathBuf) -> &Asset;
}

// Option 2: return a mutable reference
impl AssetManager {
    pub fn load(&mut self, path: PathBuf) -> &mut Asset;
}

// Option 3: return a reference-counted pointer
impl AssetManager {
    pub fn load(&mut self, path: PathBuf) -> Rc<Asset>;
}

// Option 4: return a copyable handle that can be turned into a reference
#[derive(Copy, Clone)]
pub struct AssetHandle(usize);

impl AssetManager {
    pub fn load(&mut self, path: PathBuf) -> AssetHandle;
    pub fn get(&self, handle: AssetHandle) -> &Asset;
}
```
"""

[[questions]]
type = "MultipleChoice"
multipart = "q"
prompt.prompt = """
Select each design option that satisfies the following requirement:

**Requirement:** Once loaded, an asset should be permanently immutable.
"""
prompt.distractors = ["2"]
prompt.sortAnswers = true
answer.answer = ["1", "3", "4"]
context = """
The immutability of assets is enforced by types that don't permit mutating operations. Both an immutable borrow `&Asset`
and an immutable smart-pointer like `Rc` don't permit mutating operations. Therefore Options 1, 3, and 4 DO satisfy this requirement.
Option 2 returns a mutable borrow, which does NOT satisfy the requirement.
"""
id = "10ae140e-72a6-4594-802a-d656f33cd836"


[[questions]]
type = "MultipleChoice"
multipart = "q"
prompt.prompt = """
Select each design option that satisfies the following requirement:

**Requirement:**  Clients of the asset manager need to retain access to assets across several short-term borrows of the asset manager.
"""
prompt.distractors = ["1", "2"]
prompt.sortAnswers = true
answer.answer = ["3", "4"]
context = """
"Retaining access across borrows" means the client wants to write a program like this:

```
let asset = {
    let manager = get_manager();
    manager.load("some/path")
};
process_asset(asset);
let another_asset = {
    let manager = get_manager();
    manager.load("another/path")
};
```

In this case, the lifetime of the value returned by `load` must not be tied to the lifetime of the `AssetManager`. Options 1 and 2
require that the `&Asset` and `&mut Asset` only live as long as the `&mut self`. Therefore the borrow checker
would reject programs like the one above where an asset outlives the manager reference. Options 1 and 2 do NOT satisfy the requirement.

Options 3 and 4 DO satisfy the requirement. The lifetime of `Rc<Asset>` is not tied to the lifetime of `&mut self`. Similarly, the lifetime
of `AssetHandle` is not tied to the lifetime of `&mut self`.
"""
id = "b69cde98-8ccd-4a89-aeeb-80a3338f9e68"


[[questions]]
multipart = "q"
type = "MultipleChoice"
prompt.prompt = """
Select each design option that satisfies the following requirement:

**Requirement:** It is important that all assets be deallocated at a single, predictable time.
"""
prompt.distractors = ["3"]
prompt.sortAnswers = true
answer.answer = ["1", "2", "4"]
context = """
To deallocate all assets at a single time, the `AssetManager` must retain exclusive ownership over them.
Therefore when the `AssetManager` is dropped (or otherwise instructed to deallocate assets), 
it is guaranteed that all of the assets can be safely dropped.
Options 1, 2, and 4 DO satisfy this requirement. Option 4 would require that `AssetManager::get` panics if
the client calls `manager.get(handle)` after an asset has been deallocated. If there is a real chance a client may do this,
another alternative would be for `get` to return `Option<&Asset>`.

Option 3 does NOT satisfy this requirement. Reference-counted pointers are jointly owned by every owner of an `Rc<Asset>`.
The `AssetManager` has no good way to ensure that all assets have no other owners at deallocation time.
"""
id = "48527488-ecfc-4f16-9824-76a3ac7183f4"
