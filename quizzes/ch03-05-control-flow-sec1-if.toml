[[questions]]
id = "5ae11501-25d9-4b94-8e88-aa1c2122779f"
type = "MultipleChoice"
prompt.prompt = """
True/false: executing these two pieces of code results in the same value for `x`.

Snippet 1:
```
let x = if cond { 1 } else { 2 };
```

Snippet 2:
```
let x;
if cond {
  x = 1;
} else {
  x = 2;
}
```

(Note: both of these snippets compile!)
"""
answer.answer = "True"
prompt.distractors = [ "False" ]
context = """
The first if-expression is a more concise way of representing the behavior of the second if-statement.

Note that Rust **does not** require `x` to be initially declared with `let mut` in the second snippet.
This is because Rust can determine that `x` is only ever assigned once, since only one branch of the 
if-statement will ever execute.
"""

[[questions]]
id = "4e07358c-b318-49cb-8210-fbed7ed50e23"
type = "Tracing"
prompt.program = """
fn main() {
  let x = 1;
  let y = if x { 0 } else { 1 }; 
  println!("{y}");
}
"""
answer.doesCompile = false
answer.lineNumber = 3
context = """
The condition to an if-expression must be a boolean. Rust does not have a concept of "truthy" or "falsy" values.
"""