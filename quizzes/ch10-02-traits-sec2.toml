[[questions]]
id = "a2a1546b-27bf-47d2-a1bc-86d777573f40"
type = "Tracing"
prompt.program = """
use std::fmt::Display;
fn displayable<T: Display>(t: T) -> impl Display { t }

fn main() {
  let s = String::from("hello");
  let mut s2 = displayable(s);
  s2.push_str(" world");
  println!("{s2}");
}
"""
answer.doesCompile = false
answer.lineNumber = 7
context = """
Because `displayable` returns `impl Display`, then we only know that `s2` is *some* type that implements `Display`, 
not that it is a `String` which has a `push_str` method. Therefore we cannot call `s2.push_str(..)`. If the return
type of `displayable` was `-> T`, then this program would compile.
"""


[[questions]]
id = "8b35f91c-ced2-4b8f-bf1c-90550f2b744b"
type = "MultipleChoice"
prompt.prompt = """
What is the smallest set of trait bounds on `T` needed to make this function type-check?
```
fn f<T: /* ??? */>(t: &T) {
  let t2 = t.clone();
  println!("{t2}");
}
```
"""
answer.answer = "`Clone + Display`"
prompt.distractors = [ "(no bounds)", "`Clone`", "`Clone + Display + Debug`" ]
context = """
Because `clone` is called and the `{}` display brackets are used in a formatter, then `T` must be `Clone` and `Display`.
"""
